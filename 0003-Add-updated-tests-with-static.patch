From 8182d9ba4fe42c795ff6185788cfdac5f9dc7c1d Mon Sep 17 00:00:00 2001
From: Francisco Boni <boboniboni@gmail.com>
Date: Sun, 15 Aug 2021 04:15:24 -0300
Subject: [PATCH 3/3] Add updated tests with static

---
 test/main-override.cpp | 52 +++++++++++++++++++++---------------------
 1 file changed, 26 insertions(+), 26 deletions(-)

diff --git a/test/main-override.cpp b/test/main-override.cpp
index e4d450a..2f60530 100644
--- a/test/main-override.cpp
+++ b/test/main-override.cpp
@@ -26,16 +26,16 @@ static void msleep(unsigned long msecs) { Sleep(msecs); }
 static void msleep(unsigned long msecs) { usleep(msecs * 1000UL); }
 #endif
 
-void heap_thread_free_large(); // issue #221
-void heap_no_delete();         // issue #202
-void heap_late_free();         // issue #204
-void padding_shrink();         // issue #209
-void various_tests();
-void test_mt_shutdown();
-void large_alloc(void);        // issue #363
-void fail_aslr();              // issue #372
-void tsan_numa_test();         // issue #414
-void strdup_test();            // issue #445
+static void heap_thread_free_large(); // issue #221
+static void heap_no_delete();         // issue #202
+static void heap_late_free();         // issue #204
+static void padding_shrink();         // issue #209
+static void various_tests();
+static void test_mt_shutdown();
+static void large_alloc(void);        // issue #363
+static void fail_aslr();              // issue #372
+static void tsan_numa_test();         // issue #414
+static void strdup_test();            // issue #445
 
 int main() {
   mi_stats_reset();  // ignore earlier allocations
@@ -71,7 +71,7 @@ public:
 };
 
 
-void various_tests() {
+static void various_tests() {
   atexit(free_p);
   void* p1 = malloc(78);
   void* p2 = mi_malloc_aligned(16, 24);
@@ -109,7 +109,7 @@ public:
 static Static s = Static();
 
 
-bool test_stl_allocator1() {
+static bool test_stl_allocator1() {
   std::vector<int, mi_stl_allocator<int> > vec;
   vec.push_back(1);
   vec.pop_back();
@@ -118,7 +118,7 @@ bool test_stl_allocator1() {
 
 struct some_struct { int i; int j; double z; };
 
-bool test_stl_allocator2() {
+static bool test_stl_allocator2() {
   std::vector<some_struct, mi_stl_allocator<some_struct> > vec;
   vec.push_back(some_struct());
   vec.pop_back();
@@ -138,28 +138,28 @@ static void strdup_test() {
 }
 
 // Issue #202
-void heap_no_delete_worker() {
+static void heap_no_delete_worker() {
   mi_heap_t* heap = mi_heap_new();
   void* q = mi_heap_malloc(heap, 1024);
   // mi_heap_delete(heap); // uncomment to prevent assertion
 }
 
-void heap_no_delete() {
+static void heap_no_delete() {
   auto t1 = std::thread(heap_no_delete_worker);
   t1.join();
 }
 
 
 // Issue #204
-volatile void* global_p;
+static volatile void* global_p;
 
-void t1main() {
+static void t1main() {
   mi_heap_t* heap = mi_heap_new();
   global_p = mi_heap_malloc(heap, 1024);
   mi_heap_delete(heap);
 }
 
-void heap_late_free() {
+static void heap_late_free() {
   auto t1 = std::thread(t1main);
 
   msleep(2000);
@@ -176,7 +176,7 @@ static void alloc0(/* void* arg */)
   shared_p = mi_malloc(8);
 }
 
-void padding_shrink(void)
+static void padding_shrink(void)
 {
   auto t1 = std::thread(alloc0);
   t1.join();
@@ -185,11 +185,11 @@ void padding_shrink(void)
 
 
 // Issue #221
-void heap_thread_free_large_worker() {
+static void heap_thread_free_large_worker() {
   mi_free(shared_p);
 }
 
-void heap_thread_free_large() {
+static void heap_thread_free_large() {
   for (int i = 0; i < 100; i++) {
     shared_p = mi_malloc_aligned(2 * 1024 * 1024 + 1, 8);
     auto t1 = std::thread(heap_thread_free_large_worker);
@@ -199,7 +199,7 @@ void heap_thread_free_large() {
 
 
 
-void test_mt_shutdown()
+static void test_mt_shutdown()
 {
   const int threads = 5;
   std::vector< std::future< std::vector< char* > > > ts;
@@ -236,7 +236,7 @@ void large_alloc(void)
 }
 
 // issue #372
-void fail_aslr() {
+static void fail_aslr() {
   size_t sz = (4ULL << 40); // 4TiB
   void* p = malloc(sz);
   printf("pointer p: %p: area up to %p\n", p, (uint8_t*)p + sz);
@@ -244,13 +244,13 @@ void fail_aslr() {
 }
 
 // issues #414
-void dummy_worker() {
+static void dummy_worker() {
   void* p = mi_malloc(0);
   mi_free(p);  
 }
 
-void tsan_numa_test() {
+static void tsan_numa_test() {
   auto t1 = std::thread(dummy_worker);
   dummy_worker();
   t1.join();
-}
\ No newline at end of file
+}
-- 
2.32.0

